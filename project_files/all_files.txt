=== File: ./.gitignore ===

# Dependencies
node_modules
.pnp
.pnp.js

# Production
dist
build

# Testing
coverage

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

=== End of ./.gitignore ===


=== File: ./README.md ===

# Blake's Number Bonds Game

An engaging educational game designed to help young children learn number bonds through progressive difficulty levels and interactive gameplay.

## Features

- Progressive difficulty system starting with simple pairs
- Engaging animations and sound effects
- Streak counter and high score tracking
- Colorful visual feedback
- Mobile-friendly design

## Getting Started

1. Clone the repository:
```bash
git clone https://github.com/circularr/numberbonds.git
```

2. Install dependencies:
```bash
npm install
```

3. Run the development server:
```bash
npm run dev
```

## Built With

- React
- Vite
- Tailwind CSS
- Web Audio API

## License

MIT

=== End of ./README.md ===


=== File: ./index.html ===

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>Number Bonds Game</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

=== End of ./index.html ===


=== File: ./list_files.sh ===

#!/bin/zsh

# Create output directory if it doesn't exist
mkdir -p project_files

# Remove previous output files if they exist
rm -f project_files/all_files.txt
rm -f project_files/file_list.txt

# Create header for file list
echo "=== File List ===" > project_files/file_list.txt

# Process each file
for file in $(find . -type f \
    ! -path "./node_modules/*" \
    ! -path "./dist/*" \
    ! -path "./build/*" \
    ! -path "./coverage/*" \
    ! -path "./.git/*" \
    ! -path "./project_files/*" \
    ! -name ".DS_Store" \
    ! -name "*.log" \
    ! -name "package-lock.json" \
    | sort); do
    
    # Add to file list
    echo "$file" >> project_files/file_list.txt
    
    # Add file content with header to all_files.txt
    echo "=== File: $file ===" >> project_files/all_files.txt
    echo "" >> project_files/all_files.txt
    cat "$file" >> project_files/all_files.txt
    echo "" >> project_files/all_files.txt
    echo "=== End of $file ===" >> project_files/all_files.txt
    echo "" >> project_files/all_files.txt
    echo "" >> project_files/all_files.txt
done

echo "Files have been written to project_files/all_files.txt"
echo "File list has been written to project_files/file_list.txt" 
=== End of ./list_files.sh ===


=== File: ./package.json ===

{
  "name": "number-bonds-game",
  "version": "1.0.0",
  "private": true,
  "type": "module",
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "lucide-react": "^0.284.0"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.0.4",
    "autoprefixer": "^10.4.16",
    "postcss": "^8.4.31",
    "tailwindcss": "^3.3.3",
    "vite": "^4.4.9"
  },
  "scripts": {
    "dev": "vite --host",
    "build": "vite build",
    "preview": "vite preview --host"
  }
}

=== End of ./package.json ===


=== File: ./postcss.config.js ===

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

=== End of ./postcss.config.js ===


=== File: ./src/App.jsx ===

// src/App.jsx

import React from 'react';
import NumberBondsGame from './components/NumberBondsGame';

function App() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-100 to-indigo-100 py-8">
      <NumberBondsGame />
    </div>
  );
}

export default App;

=== End of ./src/App.jsx ===


=== File: ./src/components/BadgesDisplay.jsx ===

import React, { useState, useEffect } from 'react';
import { Star, Zap, Trophy, Target, Compass, Crown, Map, Medal } from 'lucide-react';

export const BADGES = {
  QUICK_START: {
    id: 'quick-start',
    name: 'Quick Start',
    description: 'Complete your first problem',
    icon: Star,
    className: 'badge-quick-start',
    condition: (stats) => stats.totalSolved >= 1
  },
  MATH_WHIZ: {
    id: 'math-whiz',
    name: 'Math Whiz',
    description: 'Reached level 3',
    icon: Star,
    className: 'badge-math-whiz',
    condition: (stats) => stats.level >= 3
  },
  SPEED_DEMON: {
    id: 'speed-demon',
    name: 'Speed Demon',
    description: 'Completed 10 problems in under 30 seconds',
    icon: Zap,
    className: 'badge-speed-demon',
    condition: (stats) => stats.fastSolves >= 10
  },
  PERSISTENT: {
    id: 'persistent',
    name: 'Persistent',
    description: 'Played for 5 minutes straight',
    icon: Target,
    className: 'badge-persistent',
    condition: (stats) => stats.playTime >= 300
  },
  PERFECTIONIST: {
    id: 'perfectionist',
    name: 'Perfectionist',
    description: 'Got a streak of 10',
    icon: Trophy,
    className: 'badge-perfectionist',
    condition: (stats) => stats.maxStreak >= 10
  },
  EXPLORER: {
    id: 'explorer',
    name: 'Explorer',
    description: 'Tried all basic operations',
    icon: Compass,
    className: 'badge-explorer',
    condition: (stats) => stats.operationsUsed.size >= 4
  },
  VARIABLE_MASTER: {
    id: 'variable-master',
    name: 'Variable Master',
    description: 'Solved problems with 5 variables',
    icon: Star,
    className: 'badge-variable-master',
    condition: (stats) => stats.maxVariables >= 5
  },
  MATH_MASTER: {
    id: 'math-master',
    name: 'Math Master',
    description: 'Earn Math Whiz, Speed Demon, and Perfectionist badges',
    icon: Crown,
    className: 'badge-super badge-math-master',
    isSuper: true,
    requiredBadges: ['math-whiz', 'speed-demon', 'perfectionist'],
    condition: (stats, earnedBadges) => 
      earnedBadges.includes('math-whiz') && 
      earnedBadges.includes('speed-demon') && 
      earnedBadges.includes('perfectionist')
  },
  GRAND_EXPLORER: {
    id: 'grand-explorer',
    name: 'Grand Explorer',
    description: 'Earn Explorer, Variable Master, and solve 100 problems',
    icon: Map,
    className: 'badge-super badge-grand-explorer',
    isSuper: true,
    requiredBadges: ['explorer', 'variable-master'],
    condition: (stats, earnedBadges) => 
      earnedBadges.includes('explorer') && 
      earnedBadges.includes('variable-master') && 
      stats.totalSolved >= 100
  },
  ULTIMATE_ACHIEVER: {
    id: 'ultimate-achiever',
    name: 'Ultimate Achiever',
    description: 'Earn all other super badges',
    icon: Medal,
    className: 'badge-super badge-ultimate',
    isSuper: true,
    requiredBadges: ['math-master', 'grand-explorer'],
    condition: (stats, earnedBadges) => 
      earnedBadges.includes('math-master') && 
      earnedBadges.includes('grand-explorer')
  }
};

const BadgeDisplay = ({ badge, isNew = false }) => {
  const Icon = badge.icon;
  
  return (
    <div className={`badge ${badge.className} ${isNew ? 'badge-new' : ''}`}>
      <div className="badge-content">
        <Icon className="badge-icon" />
      </div>
      <div className="badge-tooltip">
        <div className="font-bold">{badge.name}</div>
        <div className="text-xs mt-1">{badge.description}</div>
      </div>
    </div>
  );
};

const BadgeCelebration = ({ badge, onClose }) => {
  return (
    <div className="badge-celebration" onClick={onClose}>
      <div className="badge-celebration-content" onClick={e => e.stopPropagation()}>
        <div className="text-3xl mb-4">🎉 New Badge Unlocked! 🎉</div>
        <div className="transform scale-150 my-8">
          <BadgeDisplay badge={badge} isNew={true} />
        </div>
        <button
          className="mt-6 px-6 py-3 bg-primary-500 text-white rounded-xl
                     hover:bg-primary-600 transition-colors font-bold"
          onClick={onClose}
        >
          Awesome!
        </button>
      </div>
    </div>
  );
};

const BadgesDisplay = ({ earnedBadges, newBadge }) => {
  const [showCelebration, setShowCelebration] = useState(false);

  useEffect(() => {
    if (newBadge) {
      setShowCelebration(true);
    }
  }, [newBadge]);

  return (
    <>
      <div className="badges-container">
        {earnedBadges.map(badgeId => {
          const badge = Object.values(BADGES).find(b => b.id === badgeId);
          if (!badge) return null;
          return <BadgeDisplay key={badge.id} badge={badge} />;
        })}
      </div>
      {showCelebration && newBadge && (
        <BadgeCelebration
          badge={newBadge}
          onClose={() => setShowCelebration(false)}
        />
      )}
    </>
  );
};

export default BadgesDisplay; 
=== End of ./src/components/BadgesDisplay.jsx ===


=== File: ./src/components/NumberBondsGame.jsx ===

// NumberBondsGame.js

import React, { useState, useEffect, useCallback } from 'react';
import { Settings } from 'lucide-react';
import useSound from '../hooks/useSound';
import BadgesDisplay, { BADGES } from './BadgesDisplay';
import SettingsPanel from './SettingsPanel';
import { SPEED_THRESHOLDS, BOSS_MODE } from '../constants/gameConstants';

const createCelebration = (x, y, type = 'success') => {
  const container = document.createElement('div');
  container.className = 'celebration-container';
  document.body.appendChild(container);

  const items = type === 'level-up' ? 30 : 15;
  const types = ['unicorn', 'heart', 'fairy', 'star', 'rainbow'];

  for (let i = 0; i < items; i++) {
    const item = document.createElement('div');
    const randomType = types[Math.floor(Math.random() * types.length)];
    item.className = `celebration-item celebration-${randomType}`;
    
    const angle = (Math.random() * 360) * (Math.PI / 180);
    const distance = 100 + Math.random() * 200;
    const tx = Math.cos(angle) * distance;
    const ty = Math.sin(angle) * distance;
    const rotation = Math.random() * 720 - 360;

    item.style.setProperty('--tx', `${tx}px`);
    item.style.setProperty('--ty', `${ty}px`);
    item.style.setProperty('--tr', `${rotation}deg`);
    item.style.left = `${x}px`;
    item.style.top = `${y}px`;

    container.appendChild(item);
  }

  setTimeout(() => {
    document.body.removeChild(container);
  }, 2000);
};

const NumberBondsGame = () => {
  // Game state
  const [problems, setProblems] = useState([]);
  const [answers, setAnswers] = useState([]);
  const [selectedProblem, setSelectedProblem] = useState(null);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [removingItems, setRemovingItems] = useState(new Set());
  const [isBossMode, setIsBossMode] = useState(false);
  const [bossTimeLeft, setBossTimeLeft] = useState(BOSS_MODE.TIME_LIMIT);
  const [bossColorIndex, setBossColorIndex] = useState(0);
  const [problemStartTime, setProblemStartTime] = useState(null);

  // Player and game settings
  const [playerName, setPlayerName] = useState(localStorage.getItem('playerName') || '');
  const initialEnabledOperations = (() => {
    const ops = JSON.parse(localStorage.getItem('enabledOperations') || '["addition"]');
    return ops.length > 0 ? ops : ['addition'];
  })();
  const [gameSettings, setGameSettings] = useState({
    minNumber: parseInt(localStorage.getItem('minNumber')) || 1,
    maxNumber: parseInt(localStorage.getItem('maxNumber')) || 10,
    problemCount: parseInt(localStorage.getItem('problemCount')) || 4,
    enabledOperations: initialEnabledOperations,
    variableCount: parseInt(localStorage.getItem('variableCount')) || 2
  });

  // UI state
  const [showSettings, setShowSettings] = useState(false);
  const [showIntroModal, setShowIntroModal] = useState(!localStorage.getItem('playerName'));
  const [showLevelUp, setShowLevelUp] = useState(false);

  // Score and streak
  const [score, setScore] = useState(0);
  const [streak, setStreak] = useState(0);
  const [multiplier, setMultiplier] = useState(1);

  // Sound effects
  const {
    playSound,
    playSuccessSound,
    playWrongSound,
    playLevelUpSound,
    playStreakSound,
    startBossMusic,
    stopBossMusic
  } = useSound();

  // Badges state
  const [earnedBadges, setEarnedBadges] = useState(() => {
    try {
      return JSON.parse(localStorage.getItem('earnedBadges') || '[]');
    } catch (e) {
      return [];
    }
  });
  const [newBadge, setNewBadge] = useState(null);
  const [gameStats, setGameStats] = useState({
    level: 1,
    fastSolves: 0,
    playTime: 0,
    maxStreak: 0,
    operationsUsed: new Set(),
    totalSolved: 0,
    maxVariables: 2
  });

  const [lastClickPosition, setLastClickPosition] = useState({
    x: window.innerWidth / 2,
    y: window.innerHeight / 2
  });

  // Score calculation function
  const calculateScore = useCallback(
    (baseScore, speedBonus = 0) => {
      const streakMultiplier = multiplier;
      const bossModeMultiplier = isBossMode ? BOSS_MODE.BONUS_MULTIPLIER : 1;
      return baseScore * streakMultiplier * bossModeMultiplier + speedBonus;
    },
    [multiplier, isBossMode]
  );

  // Problem generation function
  const generateProblem = useCallback(() => {
    const { minNumber, maxNumber, variableCount = 2, enabledOperations = ['addition'] } =
      gameSettings;

    let operations = enabledOperations;
    if (!operations || operations.length === 0) {
      operations = ['addition'];
    }

    const generateNonZeroNumber = (min = minNumber, max = maxNumber) => {
      let num;
      do {
        num = Math.floor(Math.random() * (max - min + 1)) + min;
      } while (num === 0);
      return num;
    };

    // Randomly select one of the enabled operations
    const operationType = operations[Math.floor(Math.random() * operations.length)];

    switch (operationType) {
      case 'addition': {
        const parts = [];
        for (let i = 0; i < variableCount; i++) {
          parts.push(generateNonZeroNumber());
        }
        const result = parts.reduce((a, b) => a + b, 0);
        return { parts, result, operation: '+' };
      }

      case 'subtraction': {
        const parts = [];
        const firstNumber = generateNonZeroNumber(Math.floor(maxNumber / 2), maxNumber);
        parts.push(firstNumber);

        let remainingValue = firstNumber;
        for (let i = 1; i < variableCount; i++) {
          const maxSubtract = Math.min(remainingValue - 1, maxNumber);
          if (maxSubtract < minNumber) break;
          const nextNumber = generateNonZeroNumber(minNumber, maxSubtract);
          parts.push(nextNumber);
          remainingValue -= nextNumber;
        }

        const result = parts.reduce((a, b) => a - b);
        return { parts, result, operation: '-' };
      }

      case 'multiplication': {
        const adjustedMax = Math.min(maxNumber, Math.floor(Math.pow(maxNumber, 1 / variableCount)));
        const parts = Array(variableCount)
          .fill(0)
          .map(() => generateNonZeroNumber(minNumber, adjustedMax));
        const result = parts.reduce((a, b) => a * b, 1);
        return { parts, result, operation: '×' };
      }

      case 'division': {
        const result = generateNonZeroNumber(minNumber, Math.min(maxNumber, 12));
        const multiplier = generateNonZeroNumber(minNumber, Math.min(maxNumber / result, 12));
        const firstNumber = result * multiplier;
        return { parts: [firstNumber, multiplier], result, operation: '÷' };
      }

      default:
        return { parts: [1, 1], result: 2, operation: '+' };
    }
  }, [gameSettings]);

  // Problems and answers generation function
  const generateProblemsAndAnswers = useCallback(() => {
    const newProblems = [];
    const answersSet = new Set();
    const { problemCount } = gameSettings;
    let attempts = 0;
    const maxAttempts = 100;

    while (newProblems.length < problemCount && attempts < maxAttempts) {
      attempts++;
      const problem = generateProblem();

      const problemKey = `${problem.parts.join(problem.operation)}=${problem.result}`;
      if (
        !answersSet.has(problem.result) &&
        !newProblems.some(
          (p) => p.parts.join(p.operation) === problem.parts.join(problem.operation)
        )
      ) {
        newProblems.push({
          id: Math.random().toString(36).substr(2, 9),
          ...problem
        });
        answersSet.add(problem.result);
      }
    }

    if (newProblems.length < problemCount) {
      console.warn('Could not generate enough unique problems, adjusting difficulty...');
      setGameSettings((prev) => ({
        ...prev,
        maxNumber: prev.maxNumber + 5
      }));
    }

    const shuffledAnswers = Array.from(answersSet)
      .map((value) => ({ id: Math.random().toString(36).substr(2, 9), value }))
      .sort(() => Math.random() - 0.5);

    setProblems(newProblems);
    setAnswers(shuffledAnswers);
  }, [gameSettings, generateProblem, setGameSettings]);

  // Handle correct match
  const handleMatch = useCallback(
    (problem, answer, event) => {
      const isMatch = problem.result === answer.value;
      if (isMatch) {
        playSuccessSound();
        createParticles(event.clientX, event.clientY);
        const timeTaken = (Date.now() - problemStartTime) / 1000;
        let speedBonus = 0;

        for (const key of Object.keys(SPEED_THRESHOLDS)) {
          const threshold = SPEED_THRESHOLDS[key];
          if (timeTaken <= threshold.time) {
            speedBonus = threshold.score;
            break;
          }
        }

        setScore((prev) => prev + calculateScore(100, speedBonus));
        setStreak((prev) => {
          const newStreak = prev + 1;
          setGameStats((stats) => ({
            ...stats,
            maxStreak: Math.max(stats.maxStreak, newStreak)
          }));
          return newStreak;
        });
        setMultiplier((prev) => Math.min(prev + 0.1, 3));

        setGameStats((prev) => ({
          ...prev,
          totalSolved: prev.totalSolved + 1,
          fastSolves: timeTaken <= 5 ? prev.fastSolves + 1 : prev.fastSolves
        }));

        setRemovingItems((prev) => new Set([...prev, problem.id, answer.id]));
        setTimeout(() => {
          setProblems((prev) => prev.filter((p) => p.id !== problem.id));
          setAnswers((prev) => prev.filter((a) => a.id !== answer.id));
          setRemovingItems((prev) => {
            const next = new Set(prev);
            next.delete(problem.id);
            next.delete(answer.id);
            return next;
          });
        }, 500);
      } else {
        playWrongSound();
        setStreak(0);
        setMultiplier(1);
      }
      setSelectedProblem(null);
      setSelectedAnswer(null);
      setProblemStartTime(null);
    },
    [playSuccessSound, playWrongSound, problemStartTime, calculateScore]
  );

  const handleProblemClick = useCallback(
    (problem) => {
      playSound(440, 'sine', 0.2, 0.1);
      if (!selectedProblem) {
        setProblemStartTime(Date.now());
        createClickEffect(problem);
      }
      setLastClickPosition({ x: problem.clientX, y: problem.clientY });
      const newSelectedProblem = selectedProblem?.id === problem.id ? null : problem;
      setSelectedProblem(newSelectedProblem);
      if (newSelectedProblem && selectedAnswer) {
        handleMatch(newSelectedProblem, selectedAnswer);
      }
    },
    [selectedProblem, selectedAnswer, playSound, handleMatch]
  );

  const handleAnswerClick = useCallback(
    (answer) => {
      playSound(520, 'sine', 0.2, 0.1);
      createClickEffect(answer);
      setLastClickPosition({ x: answer.clientX, y: answer.clientY });
      const newSelectedAnswer = selectedAnswer?.id === answer.id ? null : answer;
      setSelectedAnswer(newSelectedAnswer);
      if (selectedProblem && newSelectedAnswer) {
        handleMatch(selectedProblem, newSelectedAnswer);
      }
    },
    [selectedProblem, selectedAnswer, playSound, handleMatch]
  );

  // Visual effects functions
  const createClickEffect = (event) => {
    const ripple = document.createElement('div');
    ripple.className = 'ripple-effect';
    const rect = event.target.getBoundingClientRect();
    ripple.style.left = `${event.clientX - rect.left}px`;
    ripple.style.top = `${event.clientY - rect.top}px`;
    event.target.appendChild(ripple);
    setTimeout(() => ripple.remove(), 1000);
  };

  const createParticles = useCallback((x, y, isStreak = false) => {
    const container = document.createElement('div');
    container.style.position = 'fixed';
    container.style.left = `${x}px`;
    container.style.top = `${y}px`;
    container.style.pointerEvents = 'none';
    container.style.zIndex = '1000';
    document.body.appendChild(container);

    const colors = isStreak
      ? ['#FFD700', '#FFA500', '#FF4500', '#FF0000']
      : ['#FF0000', '#FF7F00', '#FFFF00', '#00FF00', '#0000FF', '#4B0082', '#8F00FF'];

    const particleCount = isStreak ? 20 : 10;

    for (let i = 0; i < particleCount; i++) {
      const particle = document.createElement('div');
      particle.className = 'particle';
      particle.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
      particle.style.setProperty('--tx', `${(Math.random() - 0.5) * 200}px`);
      particle.style.setProperty('--ty', `${(Math.random() - 0.7) * 200}px`);
      container.appendChild(particle);
    }

    setTimeout(() => {
      document.body.removeChild(container);
    }, 1000);
  }, []);

  // Effects
  useEffect(() => {
    let interval;
    if (isBossMode) {
      interval = setInterval(() => {
        setBossTimeLeft((prev) => {
          if (prev <= 0) {
            setIsBossMode(false);
            return BOSS_MODE.TIME_LIMIT;
          }
          return prev - 0.1;
        });
        setBossColorIndex((prev) => (prev + 1) % BOSS_MODE.COLORS.length);
      }, 100);
    }
    return () => clearInterval(interval);
  }, [isBossMode]);

  useEffect(() => {
    if (streak === BOSS_MODE.STREAK_REQUIRED && !isBossMode) {
      setIsBossMode(true);
      setBossTimeLeft(BOSS_MODE.TIME_LIMIT);
      playStreakSound();
      document.body.classList.add('screen-shake');
      setTimeout(() => document.body.classList.remove('screen-shake'), 1000);
    }
  }, [streak, isBossMode, playStreakSound]);

  useEffect(() => {
    if (!showIntroModal) {
      generateProblemsAndAnswers();
    }
  }, [generateProblemsAndAnswers, showIntroModal]);

  useEffect(() => {
    let cleanup;
    if (isBossMode) {
      cleanup = startBossMusic();
    }
    return () => {
      if (cleanup) cleanup();
      stopBossMusic();
    };
  }, [isBossMode, startBossMusic, stopBossMusic]);

  useEffect(() => {
    const newLevel = Math.floor(score / 1000) + 1;
    if (newLevel > gameStats.level) {
      setGameStats((prev) => ({ ...prev, level: newLevel }));
      setShowLevelUp(true);
      playLevelUpSound();
      createCelebration(window.innerWidth / 2, window.innerHeight / 2, 'level-up');
      setTimeout(() => setShowLevelUp(false), 2000);
    }
  }, [score, gameStats.level, playLevelUpSound]);

  // Update play time
  useEffect(() => {
    const timer = setInterval(() => {
      setGameStats((prev) => ({
        ...prev,
        playTime: prev.playTime + 1
      }));
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  // Check for new badges
  const checkBadges = useCallback(() => {
    Object.values(BADGES).forEach((badge) => {
      if (!earnedBadges.includes(badge.id)) {
        const meetsCondition = badge.condition(gameStats, earnedBadges);
        if (meetsCondition) {
          setEarnedBadges((prev) => {
            const newBadges = [...prev, badge.id];
            localStorage.setItem('earnedBadges', JSON.stringify(newBadges));
            return newBadges;
          });
          setNewBadge(badge);
          playStreakSound();
          setTimeout(() => setNewBadge(null), 3000);
        }
      }
    });
  }, [earnedBadges, gameStats, playStreakSound]);

  useEffect(() => {
    checkBadges();
  }, [gameStats, checkBadges]);

  // Add reset functionality
  const handleReset = useCallback(() => {
    const confirmReset = window.confirm(
      'Are you sure you want to reset all progress? This will clear all badges, scores, and settings.'
    );

    if (confirmReset) {
      localStorage.clear();
      setScore(0);
      setStreak(0);
      setMultiplier(1);
      setEarnedBadges([]);
      setGameStats({
        level: 1,
        fastSolves: 0,
        playTime: 0,
        maxStreak: 0,
        operationsUsed: new Set(),
        totalSolved: 0,
        maxVariables: 2
      });
      setGameSettings({
        minNumber: 1,
        maxNumber: 10,
        problemCount: 4,
        enabledOperations: ['addition'],
        variableCount: 2
      });
      generateProblemsAndAnswers();
    }
  }, [generateProblemsAndAnswers]);

  // Loading screen
  if (problems.length === 0) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-100 to-indigo-100 flex items-center justify-center">
        <div className="text-center p-8 bg-white/80 rounded-xl shadow-lg">
          <div className="animate-bounce text-4xl mb-4">🎲</div>
          <h2 className="text-2xl font-bold text-gray-700">Loading Game...</h2>
          <p className="text-gray-500 mt-2">Please wait a moment...</p>
        </div>
      </div>
    );
  }

  // Main game render
  return (
    <div
      className={`min-h-screen transition-colors duration-1000 ${
        isBossMode
          ? 'boss-mode-bg'
          : 'bg-gradient-to-br from-indigo-100 via-purple-100 to-pink-100'
      } p-4 sm:p-8`}
      style={
        isBossMode
          ? {
              '--color-1': BOSS_MODE.COLORS[bossColorIndex],
              '--color-2': BOSS_MODE.COLORS[(bossColorIndex + 1) % BOSS_MODE.COLORS.length],
              '--color-3': BOSS_MODE.COLORS[(bossColorIndex + 2) % BOSS_MODE.COLORS.length]
            }
          : {}
      }
    >
      {/* Settings button */}
      <button
        onClick={() => setShowSettings(true)}
        className="fixed top-4 right-4 p-3 bg-white/90 rounded-full shadow-lg hover:shadow-xl
                    transition-all hover:scale-110 active:scale-95 z-50"
      >
        <Settings className="w-6 h-6 text-gray-700" />
      </button>

      {/* Settings Modal */}
      {(showSettings || showIntroModal) && (
        <SettingsPanel
          onClose={() => {
            setShowSettings(false);
            setShowIntroModal(false);
          }}
          isIntro={showIntroModal}
          playerName={playerName}
          setPlayerName={setPlayerName}
          gameSettings={gameSettings}
          setGameSettings={setGameSettings}
          generateProblemsAndAnswers={generateProblemsAndAnswers}
        />
      )}

      {/* Game Header */}
      <div className="text-center mb-8">
        <h1 className="text-5xl font-bold mb-2 rainbow-text animate-float">
          Welcome, {playerName}! 👋
        </h1>
        <div className="text-3xl font-bold mb-4 text-primary-600">
          Score: {score}
        </div>
        {streak > 0 && (
          <div className="streak-badge animate-bounce">
            🔥 Streak: {streak}x
          </div>
        )}
      </div>

      {/* Main Game Area */}
      <div className="container mx-auto max-w-6xl">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {/* Problems Column */}
          <div className="space-y-6">
            <h2 className="text-3xl font-bold text-center mb-6 text-primary-600 animate-float">
              Problems 🧮
            </h2>
            <div className="space-y-4">
              {problems.map((problem, index) => (
                <button
                  key={problem.id}
                  onClick={() => handleProblemClick(problem)}
                  className={`kid-card w-full animate-slide-in ${
                    selectedProblem?.id === problem.id ? 'selected' : ''
                  } ${removingItems.has(problem.id) ? 'animate-disappear' : ''}`}
                  style={{ animationDelay: `${index * 0.1}s` }}
                  disabled={removingItems.has(problem.id)}
                >
                  {problem.parts.join(` ${problem.operation} `)}
                </button>
              ))}
            </div>
          </div>

          {/* Answers Column */}
          <div className="space-y-6">
            <h2 className="text-3xl font-bold text-center mb-6 text-primary-600 animate-float">
              Answers 🎯
            </h2>
            <div className="space-y-4">
              {answers.map((answer, index) => (
                <button
                  key={answer.id}
                  onClick={() => handleAnswerClick(answer)}
                  className={`kid-card w-full animate-slide-in ${
                    selectedAnswer?.id === answer.id ? 'selected' : ''
                  } ${removingItems.has(answer.id) ? 'animate-disappear' : ''}`}
                  style={{ animationDelay: `${index * 0.1}s` }}
                  disabled={removingItems.has(answer.id)}
                >
                  {answer.value}
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Boss Mode Timer */}
      {isBossMode && (
        <div className="fixed top-4 left-4 bg-black/80 rounded-full p-4 shadow-lg
                      animate-pulse border-2 border-yellow-400 z-50">
          <div className="text-3xl font-mono font-bold text-yellow-400">
            {bossTimeLeft.toFixed(1)}s
          </div>
          <div className="text-sm text-yellow-500 text-center mt-1">BOSS MODE!</div>
        </div>
      )}

      {/* Badges Display */}
      <div className="fixed top-20 right-4 z-50">
        <BadgesDisplay earnedBadges={earnedBadges} newBadge={newBadge} />
      </div>

      {/* Level Up Effect */}
      {showLevelUp && (
        <div className="level-up-container">
          <div className="level-up-text">
            Level {gameStats.level}! 🎉
          </div>
        </div>
      )}

      <button
        onClick={handleReset}
        className="reset-button"
      >
        Reset Progress
      </button>
    </div>
  );
};

export default NumberBondsGame;

=== End of ./src/components/NumberBondsGame.jsx ===


=== File: ./src/components/SettingsPanel.jsx ===

import React, { useState, useCallback } from 'react';

const SettingsPanel = React.memo(({
  onClose,
  isIntro = false,
  playerName,
  setPlayerName,
  gameSettings,
  setGameSettings,
  generateProblemsAndAnswers,
}) => {
  const [formData, setFormData] = React.useState({
    name: playerName || '',
    settings: { ...gameSettings }
  });
  const [error, setError] = React.useState('');
  const [activeTab, setActiveTab] = React.useState('name');

  // Memoized handlers to prevent unnecessary re-renders
  const handleNameChange = useCallback((e) => {
    e.preventDefault();
    e.stopPropagation();
    const newName = e.target.value;
    setFormData(prev => ({
      ...prev,
      name: newName
    }));
  }, []);

  const handleDifficultySelect = useCallback((preset) => {
    setFormData(prev => ({
      ...prev,
      settings: {
        ...prev.settings,
        minNumber: preset.min,
        maxNumber: preset.max,
        problemCount: preset.problemCount
      }
    }));
    setError('');
  }, []);

  const handleOperationToggle = useCallback((operation, e) => {
    e.preventDefault();
    e.stopPropagation();
    setFormData(prev => {
      const currentOps = prev.settings.enabledOperations || ['addition'];
      let newOps;
      
      if (currentOps.includes(operation)) {
        // Don't allow removing the last operation
        if (currentOps.length === 1) return prev;
        newOps = currentOps.filter(op => op !== operation);
      } else {
        newOps = [...currentOps, operation];
        // If division is enabled, force variableCount to 2
        if (operation === 'division') {
          return {
            ...prev,
            settings: {
              ...prev.settings,
              enabledOperations: newOps,
              variableCount: 2
            }
          };
        }
      }
      
      return {
        ...prev,
        settings: {
          ...prev.settings,
          enabledOperations: newOps
        }
      };
    });
  }, []);

  const handleVariableCountChange = useCallback((e) => {
    e.preventDefault();
    e.stopPropagation();
    const count = parseInt(e.target.value);
    if (!isNaN(count) && count >= 2 && count <= 5) {
      setFormData(prev => ({
        ...prev,
        settings: {
          ...prev.settings,
          variableCount: count
        }
      }));
    }
  }, []);

  const handleTabChange = useCallback((tabId, e) => {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    setActiveTab(tabId);
  }, []);

  const handleSave = useCallback((e) => {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    const trimmedName = formData.name.trim();
    if (trimmedName) {
      setPlayerName(trimmedName);
      setGameSettings(formData.settings);
      localStorage.setItem('playerName', trimmedName);
      
      // Properly store enabledOperations as JSON
      Object.entries(formData.settings).forEach(([key, value]) => {
        if (key === 'enabledOperations') {
          localStorage.setItem(key, JSON.stringify(value));
        } else {
          localStorage.setItem(key, value.toString());
        }
      });
      
      onClose();
      generateProblemsAndAnswers();
    }
  }, [formData, setPlayerName, setGameSettings, onClose, generateProblemsAndAnswers]);

  const handleModalClick = useCallback((e) => {
    e.preventDefault();
    e.stopPropagation();
  }, []);

  // Memoized tabs configuration
  const tabs = React.useMemo(() => [
    { id: 'name', label: '👤 Name', show: true },
    { id: 'difficulty', label: '🎯 Difficulty', show: true },
    { id: 'customize', label: '⚙️ Customize', show: true }
  ], []);

  // Memoized difficulty presets
  const difficultyPresets = React.useMemo(() => [
    { name: 'Beginner', min: 1, max: 5, problemCount: 3, emoji: '🌱' },
    { name: 'Easy', min: 1, max: 10, problemCount: 4, emoji: '🌟' },
    { name: 'Medium', min: 5, max: 15, problemCount: 5, emoji: '🚀' },
    { name: 'Hard', min: 10, max: 20, problemCount: 6, emoji: '🔥' },
    { name: 'Expert', min: 15, max: 30, problemCount: 8, emoji: '👑' }
  ], []);

  return (
    <div 
      className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4 overflow-y-auto" 
      onClick={handleModalClick}
    >
      <div 
        className="bg-white rounded-2xl w-full max-w-md mx-auto shadow-2xl transform transition-all my-4"
        onClick={handleModalClick}
      >
        {/* Header */}
        <div className="bg-gradient-to-r from-primary-500 to-primary-600 p-4 sm:p-6 rounded-t-2xl">
          <h2 className="text-2xl sm:text-3xl font-bold text-white mb-2">
            {isIntro ? '👋 Welcome!' : '⚙️ Game Settings'}
          </h2>
          <p className="text-primary-100">
            {isIntro ? "Let's set up your game" : 'Customize your experience'}
          </p>
        </div>

        {/* Tabs */}
        <div className="flex border-b" onClick={(e) => e.stopPropagation()}>
          {tabs.filter(tab => tab.show).map(tab => (
            <button
              key={tab.id}
              onClick={(e) => handleTabChange(tab.id, e)}
              className={`flex-1 p-3 sm:p-4 text-center transition-colors text-sm sm:text-base
                ${activeTab === tab.id 
                  ? 'text-primary-600 border-b-2 border-primary-500 font-bold'
                  : 'text-gray-500 hover:text-primary-500'}`}
            >
              {tab.label}
            </button>
          ))}
        </div>

        {/* Content */}
        <div className="p-4 sm:p-6 max-h-[60vh] overflow-y-auto" onClick={e => e.stopPropagation()}>
          {activeTab === 'name' && (
            <div className="space-y-4">
              <label className="block">
                <span className="text-lg font-medium text-gray-700">What's your name?</span>
                <input
                  type="text"
                  value={formData.name}
                  onChange={handleNameChange}
                  className="mt-2 w-full p-3 border-2 border-gray-200 rounded-xl 
                           focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20
                           text-lg transition-all"
                  placeholder="Enter your name"
                  autoComplete="off"
                  maxLength={20}
                />
              </label>
              {formData.name.trim() && (
                <div className="animate-fade-in text-center">
                  <span className="text-2xl">👋</span>
                  <p className="text-primary-600 font-medium">
                    Nice to meet you, {formData.name.trim()}!
                  </p>
                </div>
              )}
            </div>
          )}

          {activeTab === 'difficulty' && (
            <div className="space-y-4">
              <p className="text-gray-600">Choose your difficulty level:</p>
              <div className="grid grid-cols-1 gap-3">
                {difficultyPresets.map((preset) => (
                  <button
                    key={preset.name}
                    onClick={(e) => handleDifficultySelect(preset, e)}
                    className={`p-3 sm:p-4 rounded-xl border-2 transition-all flex items-center
                      ${formData.settings.minNumber === preset.min && 
                        formData.settings.maxNumber === preset.max &&
                        formData.settings.problemCount === preset.problemCount
                        ? 'border-primary-500 bg-primary-50 text-primary-700'
                        : 'border-gray-200 hover:border-primary-300 hover:bg-primary-50/50'}`}
                  >
                    <span className="text-xl sm:text-2xl mr-3">{preset.emoji}</span>
                    <div className="text-left flex-grow">
                      <div className="font-medium text-sm sm:text-base">{preset.name}</div>
                      <div className="text-xs sm:text-sm text-gray-500">
                        Numbers: {preset.min} to {preset.max}
                      </div>
                      <div className="text-xs sm:text-sm text-gray-500">
                        Problems: {preset.problemCount} at a time
                      </div>
                    </div>
                  </button>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'customize' && (
            <div className="space-y-6">
              {/* Operations */}
              <div>
                <label className="text-gray-700 font-medium mb-2 block">Operations</label>
                <div className="grid grid-cols-2 gap-3 mt-2">
                  {[
                    { value: 'addition', label: 'Addition', emoji: '➕' },
                    { value: 'subtraction', label: 'Subtraction', emoji: '➖' },
                    { value: 'multiplication', label: 'Multiplication', emoji: '✖️' },
                    { value: 'division', label: 'Division', emoji: '➗' }
                  ].map(op => (
                    <button
                      key={op.value}
                      onClick={(e) => handleOperationToggle(op.value, e)}
                      className={`p-3 rounded-xl border-2 transition-all text-center relative
                        ${(formData.settings.enabledOperations || ['addition']).includes(op.value)
                          ? 'border-primary-500 bg-primary-50 text-primary-700'
                          : 'border-gray-200 hover:border-primary-300 hover:bg-primary-50/50 text-gray-500'}`}
                    >
                      <div className="text-xl sm:text-2xl mb-1">{op.emoji}</div>
                      <div className="font-medium text-sm sm:text-base">{op.label}</div>
                      {(formData.settings.enabledOperations || ['addition']).includes(op.value) && (
                        <div className="absolute top-2 right-2 w-3 h-3 bg-primary-500 rounded-full" />
                      )}
                    </button>
                  ))}
                </div>
                <p className="text-xs text-gray-500 mt-2">
                  Select multiple operations to mix them together.
                  {(formData.settings.enabledOperations || []).includes('division') && 
                    ' Division problems will always use 2 variables.'}
                </p>
              </div>

              {/* Variable Count */}
              <div>
                <label className="text-gray-700 font-medium">
                  Variables per Problem: {formData.settings.variableCount || 2}
                </label>
                <input
                  type="range"
                  min="2"
                  max="5"
                  step="1"
                  value={formData.settings.variableCount || 2}
                  onChange={handleVariableCountChange}
                  disabled={(formData.settings.enabledOperations || []).includes('division')}
                  className={`w-full mt-2 cursor-pointer ${
                    (formData.settings.enabledOperations || []).includes('division')
                      ? 'opacity-50'
                      : 'accent-primary-500'
                  }`}
                />
                <div className="flex justify-between text-sm text-gray-500 mt-1">
                  <span>2</span>
                  <span>5</span>
                </div>
                <p className="text-xs text-gray-500 mt-1">
                  {(formData.settings.enabledOperations || []).includes('division')
                    ? 'Division problems always use 2 variables'
                    : 'Example: 3 variables would be like "2 + 3 + 4 = 9"'}
                </p>
              </div>

              {/* Current Difficulty Info */}
              <div className="mt-4 p-3 bg-gray-50 rounded-xl">
                <h3 className="text-sm font-medium text-gray-700 mb-2">Current Settings</h3>
                <div className="text-xs text-gray-600 space-y-1">
                  <p>Number Range: {formData.settings.minNumber} to {formData.settings.maxNumber}</p>
                  <p>Problems Shown: {formData.settings.problemCount}</p>
                  <p>Operations: {(formData.settings.enabledOperations || ['addition'])
                    .map(op => op.charAt(0).toUpperCase() + op.slice(1))
                    .join(', ')}</p>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="p-4 sm:p-6 bg-gray-50 rounded-b-2xl border-t flex justify-end gap-3">
          {!isIntro && (
            <button
              onClick={onClose}
              className="px-4 py-2 rounded-lg border border-gray-300 hover:bg-gray-100
                       transition-colors text-gray-700 text-sm sm:text-base"
            >
              Cancel
            </button>
          )}
          <button
            onClick={handleSave}
            disabled={!formData.name.trim()}
            className="px-6 py-2 rounded-lg bg-primary-500 text-white font-medium
                     hover:bg-primary-600 disabled:opacity-50 disabled:cursor-not-allowed
                     transition-colors text-sm sm:text-base"
          >
            {isIntro ? "Let's Play!" : 'Save Changes'}
          </button>
        </div>
      </div>
    </div>
  );
});

export default SettingsPanel; 
=== End of ./src/components/SettingsPanel.jsx ===


=== File: ./src/constants/gameConstants.js ===

export const SPEED_THRESHOLDS = {
  LIGHTNING: { time: 3, score: 500, label: '⚡ Lightning Fast!', color: 'text-yellow-500' },
  SUPER_FAST: { time: 5, score: 300, label: '🚀 Super Fast!', color: 'text-purple-500' },
  FAST: { time: 8, score: 200, label: '💨 Fast!', color: 'text-blue-500' },
  GOOD: { time: 12, score: 100, label: '👍 Good!', color: 'text-green-500' }
};

export const BOSS_MODE = {
  STREAK_REQUIRED: 10,
  TIME_LIMIT: 10,
  BONUS_MULTIPLIER: 3,
  COLORS: ['from-red-500', 'from-purple-600', 'from-orange-500']
};

export const DIFFICULTY_PRESETS = [
  { name: 'Beginner', min: 1, max: 5, problemCount: 3, emoji: '🌱' },
  { name: 'Easy', min: 1, max: 10, problemCount: 4, emoji: '🌟' },
  { name: 'Medium', min: 5, max: 15, problemCount: 5, emoji: '🚀' },
  { name: 'Hard', min: 10, max: 20, problemCount: 6, emoji: '🔥' },
  { name: 'Expert', min: 15, max: 30, problemCount: 8, emoji: '👑' }
];

export const OPERATIONS = [
  { value: 'addition', label: 'Addition', emoji: '➕' },
  { value: 'subtraction', label: 'Subtraction', emoji: '➖' },
  { value: 'multiplication', label: 'Multiplication', emoji: '✖️' },
  { value: 'division', label: 'Division', emoji: '➗' }
]; 
=== End of ./src/constants/gameConstants.js ===


=== File: ./src/hooks/useSound.js ===

import { useRef, useEffect, useCallback } from 'react';

// Sound presets for different effects
const SOUND_PRESETS = {
  success: {
    frequencies: [523.25, 659.25, 783.99], // C5, E5, G5 chord
    type: 'sine',
    duration: 0.15,
    volume: 0.3
  },
  wrong: {
    frequencies: [196.00, 185.00], // G3 to F#3 slide
    type: 'sine',
    duration: 0.2,
    volume: 0.2
  },
  levelUp: {
    frequencies: [523.25, 659.25, 783.99, 1046.50], // C5, E5, G5, C6 arpeggio
    type: 'sine',
    duration: 0.1,
    volume: 0.3
  },
  streak: {
    frequencies: [783.99, 987.77, 1174.66], // G5, B5, D6 power chord
    type: 'square',
    duration: 0.15,
    volume: 0.2
  },
  click: {
    frequencies: [440], // A4
    type: 'sine',
    duration: 0.05,
    volume: 0.1
  },
  boss: {
    baseFrequency: 220, // A3
    harmonics: [1, 1.5, 2, 2.5], // Harmonic series
    type: 'sawtooth',
    volume: 0.15
  }
};

const useSound = () => {
  const audioContextRef = useRef(null);
  const bossOscillatorsRef = useRef([]);
  const gainNodesRef = useRef([]);

  // Initialize audio context with user interaction
  useEffect(() => {
    const initAudio = () => {
      if (!audioContextRef.current) {
        audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();
        audioContextRef.current.suspend(); // Start suspended
      }
      document.removeEventListener('click', initAudio);
    };

    document.addEventListener('click', initAudio);
    return () => document.removeEventListener('click', initAudio);
  }, []);

  // Enhanced playSound function with better audio shaping
  const playSound = useCallback((frequency, type = 'sine', volume = 0.5, duration = 0.1) => {
    if (!audioContextRef.current) return;
    
    const ctx = audioContextRef.current;
    const oscillator = ctx.createOscillator();
    const gainNode = ctx.createGain();
    const now = ctx.currentTime;

    // Create a compressor for better sound control
    const compressor = ctx.createDynamicsCompressor();
    compressor.threshold.value = -24;
    compressor.knee.value = 30;
    compressor.ratio.value = 12;
    compressor.attack.value = 0.003;
    compressor.release.value = 0.25;

    // Configure oscillator
    oscillator.type = type;
    oscillator.frequency.value = frequency;

    // Configure gain envelope
    gainNode.gain.setValueAtTime(0, now);
    gainNode.gain.linearRampToValueAtTime(volume, now + 0.01);
    gainNode.gain.exponentialRampToValueAtTime(0.001, now + duration);

    // Connect nodes
    oscillator.connect(gainNode);
    gainNode.connect(compressor);
    compressor.connect(ctx.destination);

    // Start and stop
    oscillator.start(now);
    oscillator.stop(now + duration + 0.1);

    return () => {
      oscillator.disconnect();
      gainNode.disconnect();
      compressor.disconnect();
    };
  }, []);

  // Play a sequence of notes
  const playSequence = useCallback((notes, options = {}) => {
    if (!audioContextRef.current) return;
    
    const ctx = audioContextRef.current;
    const now = ctx.currentTime;
    let timeOffset = 0;

    notes.forEach((frequency, index) => {
      const duration = options.duration || 0.1;
      const spacing = options.spacing || 0.05;
      
      playSound(
        frequency,
        options.type || 'sine',
        options.volume || 0.3,
        duration
      );
      
      timeOffset += duration + spacing;
    });
  }, [playSound]);

  // Enhanced success sound with happy chord
  const playSuccessSound = useCallback(() => {
    const { frequencies, type, duration, volume } = SOUND_PRESETS.success;
    playSequence(frequencies, { type, duration, volume });
  }, [playSequence]);

  // Gentle wrong answer sound
  const playWrongSound = useCallback(() => {
    const { frequencies, type, duration, volume } = SOUND_PRESETS.wrong;
    playSequence(frequencies, { type, duration, volume });
  }, [playSequence]);

  // Exciting level up sound
  const playLevelUpSound = useCallback(() => {
    const { frequencies, type, duration, volume } = SOUND_PRESETS.levelUp;
    playSequence(frequencies, { type, duration, volume, spacing: 0.08 });
  }, [playSequence]);

  // Energetic streak sound
  const playStreakSound = useCallback(() => {
    const { frequencies, type, duration, volume } = SOUND_PRESETS.streak;
    playSequence(frequencies, { type, duration, volume });
  }, [playSequence]);

  // Enhanced boss mode music
  const startBossMusic = useCallback(() => {
    if (!audioContextRef.current) return;
    
    const ctx = audioContextRef.current;
    const { baseFrequency, harmonics, type, volume } = SOUND_PRESETS.boss;

    // Stop any existing boss music
    stopBossMusic();

    // Create oscillators for rich harmony
    harmonics.forEach((harmonic, index) => {
      const oscillator = ctx.createOscillator();
      const gainNode = ctx.createGain();
      
      oscillator.type = type;
      oscillator.frequency.value = baseFrequency * harmonic;
      
      gainNode.gain.value = volume / (index + 1); // Decrease volume for higher harmonics

      oscillator.connect(gainNode);
      gainNode.connect(ctx.destination);
      
      oscillator.start();
      
      bossOscillatorsRef.current.push(oscillator);
      gainNodesRef.current.push(gainNode);

      // Add subtle frequency modulation
      const lfoFreq = 2 + Math.random() * 3; // 2-5 Hz
      const lfo = ctx.createOscillator();
      const lfoGain = ctx.createGain();
      
      lfo.frequency.value = lfoFreq;
      lfoGain.gain.value = baseFrequency * 0.02; // Subtle modulation
      
      lfo.connect(lfoGain);
      lfoGain.connect(oscillator.frequency);
      lfo.start();
      
      bossOscillatorsRef.current.push(lfo);
      gainNodesRef.current.push(lfoGain);
    });

    return () => stopBossMusic();
  }, []);

  // Clean stop for boss music
  const stopBossMusic = useCallback(() => {
    const ctx = audioContextRef.current;
    if (!ctx) return;

    bossOscillatorsRef.current.forEach(osc => {
      try {
        osc.stop();
        osc.disconnect();
      } catch (e) {
        console.warn('Error stopping oscillator:', e);
      }
    });

    gainNodesRef.current.forEach(gain => {
      try {
        gain.disconnect();
      } catch (e) {
        console.warn('Error disconnecting gain node:', e);
      }
    });

    bossOscillatorsRef.current = [];
    gainNodesRef.current = [];
  }, []);

  // Resume audio context if suspended
  const resumeAudioContext = useCallback(() => {
    if (audioContextRef.current?.state === 'suspended') {
      audioContextRef.current.resume();
    }
  }, []);

  useEffect(() => {
    // Clean up on unmount
    return () => {
      stopBossMusic();
      if (audioContextRef.current) {
        audioContextRef.current.close();
      }
    };
  }, [stopBossMusic]);

  return {
    playSound,
    playSuccessSound,
    playWrongSound,
    playLevelUpSound,
    playStreakSound,
    startBossMusic,
    stopBossMusic,
    resumeAudioContext
  };
};

export default useSound; 
=== End of ./src/hooks/useSound.js ===


=== File: ./src/index.css ===

/* styles.css */

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
  .kid-card {
    @apply p-4 rounded-2xl bg-white shadow-lg transition-all duration-300
           hover:shadow-xl hover:scale-105 active:scale-95
           border-4 border-transparent relative overflow-hidden;
    animation: float 3s ease-in-out infinite;
  }

  .kid-card.selected {
    @apply border-primary-500 bg-primary-50 transform scale-105;
    animation: pulse 2s ease-in-out infinite;
  }

  .badges-container {
    @apply fixed top-4 right-16 flex flex-wrap gap-2 max-w-[200px] p-2
      bg-white/30 backdrop-blur-sm rounded-xl;
  }

  .badge {
    @apply relative inline-block p-3 m-2 rounded-xl bg-white shadow-md
           hover:shadow-xl transition-all duration-300;
  }

  .badge-content {
    @apply flex items-center justify-center w-12 h-12 rounded-full;
    background: linear-gradient(45deg, #f3f4f6, #ffffff);
  }

  .badge-icon {
    @apply w-6 h-6 text-primary-500;
  }

  .badge-tooltip {
    @apply absolute left-1/2 bottom-full mb-2 w-48 p-2 rounded-lg bg-gray-800
           text-white text-center text-sm opacity-0 invisible transition-all
           duration-200 transform -translate-x-1/2 scale-95;
  }

  .badge:hover .badge-tooltip {
    @apply opacity-100 visible scale-100;
  }

  .badge-celebration {
    @apply fixed inset-0 z-[100] flex items-center justify-center bg-black/70 backdrop-blur-sm;
    animation: fade-in 0.3s ease-out;
  }

  .badge-celebration-content {
    @apply bg-white rounded-3xl p-8 text-center transform max-w-sm mx-4 relative z-[101];
    animation: celebration-pop 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  }

  .badge-new {
    animation: badge-unlock 0.8s cubic-bezier(0.22, 1, 0.36, 1);
  }

  .streak-badge {
    @apply inline-block px-6 py-2 rounded-full bg-gradient-to-r
           from-yellow-400 via-red-500 to-pink-500 text-white
           font-bold text-lg shadow-lg;
    animation: flame 1s ease-in-out infinite;
  }

  .level-up-container {
    @apply fixed inset-0 flex items-center justify-center z-50 pointer-events-none;
  }

  .level-up-text {
    @apply text-6xl font-bold text-primary-500 transform scale-0;
    animation: levelUp 1s cubic-bezier(0.22, 1, 0.36, 1) forwards;
  }

  .reset-button {
    @apply fixed bottom-4 right-4 px-4 py-2 rounded-lg bg-gray-200
           hover:bg-gray-300 transition-colors text-gray-700 text-sm;
  }

  /* Celebration Effects */
  .celebration-container {
    @apply fixed pointer-events-none z-50;
  }

  .particle {
    @apply absolute w-2 h-2 rounded-full;
    animation: float-away 1s ease-out forwards;
  }

  .celebration-item {
    @apply absolute w-6 h-6 opacity-0;
    animation: celebrate 1s ease-out forwards;
  }

  .celebration-unicorn {
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 36 36"><path fill="%23F4ABBA" d="M35.885 11.833c0-5.45-4.418-9.868-9.867-9.868-3.308 0-6.227 1.633-8.018 4.129-1.791-2.496-4.71-4.129-8.017-4.129-5.45 0-9.868 4.417-9.868 9.868 0 .772.098 1.52.266 2.241C1.751 22.587 11.216 31.568 18 34.034c6.783-2.466 16.249-11.447 17.617-19.959.17-.721.268-1.469.268-2.242z"/></svg>');
    width: 24px;
    height: 24px;
    background-size: contain;
    background-repeat: no-repeat;
  }

  .celebration-heart {
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 36 36"><path fill="%23DD2E44" d="M35.885 11.833c0-5.45-4.418-9.868-9.867-9.868-3.308 0-6.227 1.633-8.018 4.129-1.791-2.496-4.71-4.129-8.017-4.129-5.45 0-9.868 4.417-9.868 9.868 0 .772.098 1.52.266 2.241C1.751 22.587 11.216 31.568 18 34.034c6.783-2.466 16.249-11.447 17.617-19.959.17-.721.268-1.469.268-2.242z"/></svg>');
    width: 24px;
    height: 24px;
    background-size: contain;
    background-repeat: no-repeat;
  }

  .celebration-star {
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 36 36"><path fill="%23FDCB58" d="M18 1.972l4.763 9.648 10.65 1.547-7.707 7.508L27.763 31.3 18 26.43 8.237 31.3l2.056-11.625L2.587 13.167l10.65-1.547z"/></svg>');
    width: 24px;
    height: 24px;
    background-size: contain;
    background-repeat: no-repeat;
  }

  .celebration-fairy {
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 36 36"><path fill="%239266CC" d="M24.6 20.1c0 6.2-5 11.3-11.3 11.3S2 26.3 2 20.1s5-11.3 11.3-11.3S24.6 13.9 24.6 20.1z"/><path fill="%23CCD6DD" d="M34 20.1c0 6.2-5 11.3-11.3 11.3S11.4 26.3 11.4 20.1s5-11.3 11.3-11.3S34 13.9 34 20.1z"/></svg>');
    width: 24px;
    height: 24px;
    background-size: contain;
    background-repeat: no-repeat;
  }

  .celebration-rainbow {
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 36 36"><path fill="%23F4ABBA" d="M2 14c0 7.456 6.044 13.5 13.5 13.5S29 21.456 29 14H2z"/><path fill="%23FDD888" d="M2 11c0 7.456 6.044 13.5 13.5 13.5S29 18.456 29 11H2z"/><path fill="%2387CEEB" d="M2 8c0 7.456 6.044 13.5 13.5 13.5S29 15.456 29 8H2z"/><path fill="%2398FB98" d="M2 5c0 7.456 6.044 13.5 13.5 13.5S29 12.456 29 5H2z"/></svg>');
    width: 24px;
    height: 24px;
    background-size: contain;
    background-repeat: no-repeat;
  }

  @keyframes float-away {
    0% {
      transform: translate(0, 0) scale(0.5) rotate(0deg);
      opacity: 0;
    }
    10% {
      opacity: 1;
    }
    100% {
      transform: translate(var(--tx), var(--ty)) scale(1.5) rotate(var(--tr));
      opacity: 0;
    }
  }

  /* Boss Mode Gradient */
  .boss-mode-bg {
    background: linear-gradient(
      45deg,
      var(--color-1),
      var(--color-2),
      var(--color-3)
    );
    background-size: 400% 400%;
    animation: gradientBG 10s ease infinite;
  }

  @keyframes gradientBG {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }
}

/* Animations */
@keyframes selected-card {
  0% { transform: scale(1); }
  50% { transform: scale(1.1) rotate(2deg); }
  100% { transform: scale(1.05); }
}

@keyframes celebration-pop {
  0% { transform: scale(0.8) translateY(20px); opacity: 0; }
  100% { transform: scale(1) translateY(0); opacity: 1; }
}

@keyframes streak-pop {
  0% { transform: translateX(-50%) scale(0); }
  50% { transform: translateX(-50%) scale(1.2); }
  100% { transform: translateX(-50%) scale(1); }
}

@keyframes level-up {
  0% { transform: translate(-50%, -50%) scale(0.5); opacity: 0; }
  50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }
  100% { transform: translate(-50%, -50%) scale(1); opacity: 0; }
}

@keyframes badge-glow {
  0%, 100% {
    box-shadow: 0 0 15px rgba(255, 255, 255, 0.5),
                0 0 30px rgba(255, 215, 0, 0.3);
  }
  50% {
    box-shadow: 0 0 25px rgba(255, 255, 255, 0.8),
                0 0 50px rgba(255, 215, 0, 0.5);
  }
}

@keyframes fade-in {
  0% { opacity: 0; }
  100% { opacity: 1; }
}

/* Badge Styles */
.badge-quick-start {
  @apply bg-gradient-to-br from-green-400/90 to-emerald-500/90 border-green-300;
}

.badge-math-whiz {
  @apply bg-gradient-to-br from-blue-400/90 to-indigo-500/90 border-blue-300;
}

.badge-speed-demon {
  @apply bg-gradient-to-br from-yellow-400/90 to-orange-500/90 border-yellow-300;
}

.badge-persistent {
  @apply bg-gradient-to-br from-purple-400/90 to-violet-500/90 border-purple-300;
}

.badge-perfectionist {
  @apply bg-gradient-to-br from-pink-400/90 to-rose-500/90 border-pink-300;
}

.badge-explorer {
  @apply bg-gradient-to-br from-cyan-400/90 to-teal-500/90 border-cyan-300;
}

.badge-variable-master {
  @apply bg-gradient-to-br from-fuchsia-400/90 to-purple-500/90 border-fuchsia-300;
}

.badge-super {
  @apply border-4;
  animation: super-badge-glow 2s infinite;
}

@keyframes super-badge-glow {
  0%, 100% {
    box-shadow: 0 0 15px rgba(255, 255, 255, 0.5),
                0 0 30px rgba(255, 215, 0, 0.3);
  }
  50% {
    box-shadow: 0 0 25px rgba(255, 255, 255, 0.8),
                0 0 50px rgba(255, 215, 0, 0.5);
  }
}

@keyframes confetti-fall {
  0% { transform: translateY(-10vh) rotate(0deg); opacity: 1; }
  100% { transform: translateY(100vh) rotate(720deg); opacity: 0; }
}

@keyframes star-shoot {
  0% { transform: scale(0) translate(0, 0); opacity: 1; }
  100% { transform: scale(1) translate(var(--tx), var(--ty)); opacity: 0; }
}

@keyframes rainbow {
  0%, 100% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
}

@keyframes float {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-10px); }
}

@keyframes slide-in {
  from { opacity: 0; transform: translateX(-20px); }
  to { opacity: 1; transform: translateX(0); }
}

@keyframes badge-unlock {
  0% { transform: scale(0) rotate(-15deg); opacity: 0; }
  50% { transform: scale(1.2) rotate(10deg); opacity: 0.8; }
  75% { transform: scale(0.9) rotate(-5deg); opacity: 0.9; }
  100% { transform: scale(1) rotate(0); opacity: 1; }
}

@keyframes pulse {
  0%, 100% { transform: scale(1.05); }
  50% { transform: scale(1.02); }
}

@keyframes flame {
  0%, 100% { transform: scale(1) rotate(-2deg); }
  50% { transform: scale(1.1) rotate(2deg); }
}

@keyframes levelUp {
  0% { transform: scale(0) rotate(-10deg); opacity: 0; }
  50% { transform: scale(1.2) rotate(5deg); opacity: 0.8; }
  100% { transform: scale(1) rotate(0deg); opacity: 1; }
}

@keyframes ripple {
  0% { transform: scale(0); opacity: 1; }
  100% { transform: scale(4); opacity: 0; }
}

@keyframes shake {
  10%, 90% { transform: translate3d(-1px, 0, 0); }
  20%, 80% { transform: translate3d(2px, 0, 0); }
  30%, 50%, 70% { transform: translate3d(-4px, 0, 0); }
  40%, 60% { transform: translate3d(4px, 0, 0); }
}

@keyframes celebrate {
  0% {
    transform: translate(0, 0) rotate(0deg);
    opacity: 1;
  }
  100% {
    transform: translate(var(--tx), var(--ty)) rotate(var(--tr));
    opacity: 0;
  }
}

/* Responsive adjustments */
@media (max-width: 640px) {
  .kid-card {
    @apply p-3 text-sm;
  }
  
  .badge-content {
    @apply w-10 h-10;
  }
  
  .badge-icon {
    @apply w-5 h-5;
  }
  
  .level-up-text {
    @apply text-4xl;
  }
}

=== End of ./src/index.css ===


=== File: ./src/main.jsx ===

// src/main.jsx

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css'; // Import Tailwind CSS styles

ReactDOM.createRoot(document.getElementById('root')).render(<App />);

=== End of ./src/main.jsx ===


=== File: ./tailwind.config.js ===

// tailwind.config.js

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{js,jsx,ts,tsx}", // Adjust paths based on your project structure
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0f9ff',
          100: '#e0f2fe',
          200: '#bae6fd',
          300: '#7dd3fc',
          400: '#38bdf8',
          500: '#0ea5e9',
          600: '#0284c7',
          700: '#0369a1',
          800: '#075985',
          900: '#0c4a6e',
        },
        secondary: {
          50: '#fdf4ff',
          100: '#fae8ff',
          200: '#f5d0fe',
          300: '#f0abfc',
          400: '#e879f9',
          500: '#d946ef',
          600: '#c026d3',
          700: '#a21caf',
          800: '#86198f',
          900: '#701a75',
        },
      },
      backgroundImage: {
        'gradient-conic': 'conic-gradient(var(--tw-gradient-stops))',
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
      },
      animation: {
        'rainbow': 'rainbow 3s linear infinite',
        'float': 'float 3s ease-in-out infinite',
        'slide-in': 'slide-in 0.5s ease-out forwards',
        'badge-unlock': 'badge-unlock 0.8s cubic-bezier(0.22, 1, 0.36, 1)',
      },
      keyframes: {
        rainbow: {
          '0%, 100%': { backgroundPosition: '0% 50%' },
          '50%': { backgroundPosition: '100% 50%' },
        },
        float: {
          '0%, 100%': { transform: 'translateY(0)' },
          '50%': { transform: 'translateY(-10px)' },
        },
        'slide-in': {
          from: { opacity: '0', transform: 'translateX(-20px)' },
          to: { opacity: '1', transform: 'translateX(0)' },
        },
        'badge-unlock': {
          '0%': { transform: 'scale(0) rotate(-15deg)', opacity: '0' },
          '50%': { transform: 'scale(1.2) rotate(10deg)', opacity: '0.8' },
          '75%': { transform: 'scale(0.9) rotate(-5deg)', opacity: '0.9' },
          '100%': { transform: 'scale(1) rotate(0)', opacity: '1' },
        },
      },
    },
  },
  plugins: [],
};

=== End of ./tailwind.config.js ===


=== File: ./vite.config.js ===

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
})

=== End of ./vite.config.js ===


